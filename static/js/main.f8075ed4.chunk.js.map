{"version":3,"sources":["withRoot.js","components/Navigation.js","Forecast.js","Field.js","FieldList.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","light","purple","main","dark","secondary","green","withRoot","Component","props","react_default","a","createElement","styles","CssBaseline_default","Navigation","classes","this","Grid_default","item","xs","container","className","root","justify","alignItems","style","textAlign","Cloud_default","fontSize","Home_default","List_default","withStyles","flexGrow","background","height","Forecast","components_Navigation","width","margin","padding","Field","FieldList","Main","lib_default","enableMouseEvents","index","onChangeIndex","idx","idxLatest","meta","console","log","src_Forecast","src_Field","src_FieldList","App","Fragment","src_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8075ed4.chunk.js","sourcesContent":["import React from \"react\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport green from \"@material-ui/core/colors/green\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\n// A theme with custom primary and secondary color.\n// It's optional.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: purple[300],\n      main: purple[500],\n      dark: purple[700]\n    },\n    secondary: {\n      light: green[300],\n      main: green[500],\n      dark: green[700]\n    }\n  }\n});\n\nfunction withRoot(Component) {\n  function WithRoot(props) {\n    // MuiThemeProvider makes the theme available down the React tree\n    // thanks to React context.\n    return (\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Component {...props} />\n      </MuiThemeProvider>\n    );\n  }\n\n  return WithRoot;\n}\n\nexport default withRoot;\n","import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport withRoot from \"../withRoot\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport CloudIcon from \"@material-ui/icons/Cloud\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    background: \"#fff\",\n    height: 100\n  }\n});\n\nclass Navigation extends Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid item xs={12}>\n        <Grid\n          container\n          className={classes.root}\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs={4} style={{ textAlign: \"center\" }}>\n            <CloudIcon style={{ fontSize: 35 }} />\n          </Grid>\n          <Grid item xs={4} style={{ textAlign: \"center\" }}>\n            <HomeIcon style={{ fontSize: 35 }} />\n          </Grid>\n          <Grid item xs={4} style={{ textAlign: \"center\" }}>\n            <ListIcon style={{ fontSize: 35 }} />\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withRoot(withStyles(styles)(Navigation));\n","import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport withRoot from \"./withRoot\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Navigation from \"./components/Navigation\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    height: \"100vh\",\n    width: \"100%\",\n    margin: 0,\n    padding: 0,\n    background: \"#fff\"\n  }\n});\n\nclass Forecast extends Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container className={classes.root}>\n        <Navigation />\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <p>Forecast</p>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withRoot(withStyles(styles)(Forecast));\n","import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport withRoot from \"./withRoot\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Navigation from \"./components/Navigation\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    height: \"100vh\",\n    width: \"100%\",\n    margin: 0,\n    padding: 0,\n    background: \"#fff\"\n  }\n});\n\nclass Field extends Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container className={classes.root}>\n        <Navigation />\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <p>Field</p>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withRoot(withStyles(styles)(Field));\n","import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport withRoot from \"./withRoot\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Navigation from \"./components/Navigation\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    height: \"100vh\",\n    width: \"100%\",\n    margin: 0,\n    padding: 0,\n    background: \"#fff\"\n  }\n});\n\nclass FieldList extends Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container className={classes.root}>\n        <Navigation />\n        <Grid item xs={12} style={{ textAlign: \"center\" }}>\n          <p>Field list</p>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withRoot(withStyles(styles)(FieldList));\n","import React, { Component } from \"react\";\nimport SwipeableViews from \"react-swipeable-views\";\n\nimport Forecast from \"./Forecast\";\nimport Field from \"./Field\";\nimport FieldList from \"./FieldList\";\n\nclass Main extends Component {\n  render() {\n    return (\n      <SwipeableViews\n        enableMouseEvents\n        index={1}\n        onChangeIndex={(idx, idxLatest, meta) =>\n          console.log(idx, idxLatest, meta)\n        }\n      >\n        <Forecast />\n        <Field />\n        <FieldList />\n      </SwipeableViews>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport Main from \"./Main\";\n// import Landing from \"./Landing\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Main />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}